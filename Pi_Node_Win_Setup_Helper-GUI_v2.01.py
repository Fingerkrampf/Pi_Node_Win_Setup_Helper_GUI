#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Pi Node Win Setup Helper GUI v2.01
Copyright (c) 2025 Fingerkrampf

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

Contact: github.com/Fingerkrampf

----------------------------------------------------------------

Pi Node Win Setup Helper GUI v2.01
Copyright (c) 2025 Fingerkrampf

Dieses Programm ist freie Software: Sie können es unter den Bedingungen
der GNU General Public License, wie von der Free Software Foundation,
Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren
veröffentlichten Version, weiterverteilen und/oder modifizieren.

Dieses Programm wird in der Hoffnung bereitgestellt, dass es nützlich sein wird, jedoch
OHNE JEDE GEWÄHRLEISTUNG, bereitgestellt; sogar ohne die implizite
Gewährleistung der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK.
Siehe die GNU General Public License für weitere Einzelheiten.

Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
Programm erhalten haben. Wenn nicht, siehe <https://www.gnu.org/licenses/>.

Kontakt: github.com/Fingerkrampf
"""

import customtkinter as ctk
import subprocess
import os
import sys
import ctypes
import requests
import threading
import time
import json
import winreg
import re
import paramiko
import tkinter
import base64
import tempfile
import webbrowser
import io
try:
    from PIL import Image
except ImportError:
    print("Pillow library not found. Installing...")
    subprocess.run([sys.executable, "-m", "pip", "install", "Pillow"], check=True)
    from PIL import Image

ICON_BASE64 = b''

DONATION_QR_BASE64 = b"" 

URLS = {
    "wsl_kernel": "https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi",
    "wireguard_installer": "https://download.wireguard.com/windows-client/wireguard-installer.exe",
    "docker_releases_page": "https://docs.docker.com/desktop/release-notes/",
    "pi_node_api_latest_release": "https://api.github.com/repos/pi-node/pi-node/releases/latest",
}

WIREGUARD_CLIENT_NAME = "pivpnclient"

def get_all_langs():
    return {
        "de": {
            "title": "Pi Node Win Setup Helper GUI v2.01 by Fingerkrampf @ github.com/fingerkrampf",
            "needs_admin": "Administratorrechte erforderlich. Bitte neu starten.",
            "restart_needed_title": "Neustart erforderlich",
            "restart_needed_text": "Einige Änderungen erfordern einen Neustart. Möchten Sie jetzt neu starten? Nach dem Neustart startet das Tool automatisch, um den Vorgang abzuschließen.",
            "yes": "Ja",
            "no": "Nein",
            "info_title": "Hilfe / Informationen",
            "info_text": (
                "Willkommen beim Pi Node Win Setup Helper GUI v2.01!\n\n"
                "Dieses Tool hilft Ihnen, verschiedene Systemkomponenten für den Betrieb eines Pi Nodes zu installieren und zu konfigurieren.\n\n"
                "RECHTLICHE HINWEISE - BITTE SORGFÄLTIG LESEN:\n"
                "• Diese Software wird 'WIE BESEHEN' ohne jegliche Garantien bereitgestellt\n"
                "• Nutzer sind allein verantwortlich für die Einhaltung aller anwendbaren Gesetze\n"
                "• Der Autor (GitHub User Fingerkrampf) haftet nicht für Schäden oder Verluste\n"
                "• Nutzer tragen alle Risiken im Zusammenhang mit Kryptowährungsaktivitäten\n"
                "• Dieses Tool interagiert mit Drittanbieter-Software - prüfen Sie deren Bedingungen\n\n"
                "VOR DER NUTZUNG:\n"
                "• Stellen Sie sicher, dass Sie lokale Gesetze zu Kryptowährungen einhalten\n"
                "• Prüfen Sie die offiziellen Nutzungsbedingungen des Pi Networks\n"
                "• Verwenden Sie dieses Tool nur auf Systemen, die Ihnen gehören oder die Sie modifizieren dürfen\n"
                "• Führen Sie angemessene Backups Ihres Systems durch\n\n"
                "TECHNISCHE HINWEISE:\n"
                "Das Tool lädt Software ausschließlich von offiziellen Quellen!\n"
                "- Grüne Haken (✓) zeigen an, dass eine Komponente installiert/aktiviert ist\n"
                "- Rote Kreuze (✗) zeigen an, dass eine Komponente nicht installiert/aktiviert ist\n\n"
                "Entwickelt von GitHub User: Fingerkrampf\n"
                "Github.com/Fingerkrampf\n"
                "Lizenz: GPL v3 - Vollständige Bedingungen siehe LICENSE-Datei"
            ),
            "exit": "Beenden",
            "help": "Hilfe",
            "github": "GitHub",
            "donate": "Unterstützen",
            "donate_title": "Scan QR-Code",
            "donate_text": "Thanks for your support.\nI really appreciate the effort behind every transfer – that's the real value for me.\n\nDanke für Deinen Support.\nIch weiß die Mühe, die hinter jeder Überweisung steckt, sehr zu schätzen – das ist für mich der eigentliche Wert.",
            "status_installed": "Installiert",
            "status_not_installed": "Nicht installiert",
            "status_active": "Aktiviert",
            "status_not_active": "Nicht aktiv",
            "status_configured": "Konfiguriert & Verbunden",
            "status_not_configured": "Nicht konfiguriert",
            "status_keys_generated": "Schlüssel generiert",
            "status_no_keys": "Keine Schlüssel",
            "install": "Installieren",
            "activate": "Aktivieren",
            "deactivate": "Deaktivieren",
            "configure": "Konfigurieren",
            "generate": "Generieren",
            "uninstall": "Deinstallieren",
            "delete": "Löschen",
            "firewall_info_title": "Wichtiger Hinweis",
            "firewall_info_text": "Die Windows Firewall-Regeln wurden aktiviert.\n\nBitte denken Sie daran, die TCP-Ports 31400 bis 31409 auch in Ihrem Router freizugeben (Port-Weiterleitung), damit Ihr Node von außen erreichbar ist.",
            "wsl_setup": "Windows Features & WSL2 Setup",
            "hibernate": "Ruhemodus Deaktivierung",
            "docker": "Docker Desktop",
            "pi_node": "Pi Win Node",
            "firewall": "Windows Firewall-Regeln (Ports 31400-31409)",
            "wireguard_client": "WireGuard Client",
            "wireguard_keys": "WireGuard Schlüssel (Lokal)",
            "wireguard_server": "WireGuard Server (Auto-Setup via SSH)",
            "ssh_prompt_title": "SSH-Verbindungsinformationen",
            "ssh_prompt_text": "Bitte geben Sie die Daten für den Linux-Server ein:",
            "server_ip": "Server IP:",
            "username": "Benutzername:",
            "password": "Passwort/Sudo-Passwort:",
            "connect": "Verbinden",
            "wg_activation_title": "Aktion erforderlich",
            "wg_activation_text": "✅ Die WireGuard-Konfiguration ist abgeschlossen.\n\nBitte öffnen Sie den WireGuard-Client und klicken Sie auf 'Aktivieren', um die VPN-Verbindung zu starten.\n\n⚠️ ACHTUNG: Aktivieren Sie die WireGuard-Verbindung auf dem Client nur, wenn der UDP-Port 51820 in der Firewall des Serveranbieters eingetragen ist. Andernfalls verlieren Sie Ihre Internetverbindung, bis Sie die WireGuard-Verbindung auf dem Client wieder deaktivieren.",
            "wg_setup_popup_title": "WireGuard Server Einrichtung...",
            "copy_content": "Inhalt kopieren",
            "close": "Schließen",
            "paste": "Einfügen",
            "wg_client_note": "Die Schritte 6 bis 8 sind nur notwendig, wenn Sie über keine dedizierte IPv4-Adresse verfügen (z.B. bei DS-Lite oder CG-NAT-Internetanschlüssen). Bitte beachten Sie dass Sie hierfür einen Debian-basierten (z.B. Ubuntu) Server mit dedizierter IPv4-Adresse und Root-Rechten benötigen.",
            "wg_setup_finished": "--- ✅ WireGuard-Setup erfolgreich abgeschlossen! ---\n⚠️ Hinweis: Der UDP-Port 51820 und die TCP-Ports 31400 bis 31409 müssen in der Firewall des Serveranbieters (meist über deren Webinterface) freigegeben werden.",
            "wg_setup_failed": "--- ❌ Ein Fehler ist aufgetreten: {e} ---",
            "wsl_setup_tooltip": "Aktiviert das 'Windows-Subsystem für Linux' (WSL2) und die 'Plattform für virtuelle Maschinen'. Diese sind die Grundlage, damit Docker Desktop und somit der Pi Node auf Ihrem Windows-System ausgeführt werden kann. Die Einrichtung erfordert einen Neustart.",
            "hibernate_tooltip": "Deaktiviert den Ruhezustand (Hibernate) von Windows. Dies ist wichtig, um sicherzustellen, dass Ihr Computer und der Pi Node ununterbrochen laufen und jederzeit erreichbar sind. Ein aktiver Node darf nicht in den Ruhezustand gehen.",
            "docker_tooltip": "Installiert Docker Desktop. Docker ist eine Plattform zur Erstellung und Ausführung von Anwendungen in Containern. Der Pi Node läuft in einem solchen Docker-Container. Dies stellt sicher, dass er in einer isolierten und konsistenten Umgebung arbeitet.",
            "pi_node_tooltip": "Installiert die Pi Node Desktop-Anwendung. Dies ist die grafische Benutzeroberfläche, mit der Sie Ihren Node verwalten, Ihren Status einsehen und mit dem Pi-Netzwerk interagieren können.",
            "firewall_tooltip": "Erstellt Regeln in der Windows-Firewall, um die für den Pi Node notwendigen Ports (31400-31409) freizugeben. Dies erlaubt anderen Nodes im Pi-Netzwerk, sich mit Ihrem Node zu verbinden. Achtung: Diese Ports müssen zusätzlich auch in Ihrem Internet-Router freigegeben werden (Port-Weiterleitung).",
            "wireguard_client_tooltip": "Installiert den WireGuard VPN-Client. Dieser wird benötigt, falls Ihr Internetanbieter Ihnen keine öffentliche IPv4-Adresse zur Verfügung stellt (z.B. bei DS-Lite oder CG-NAT). Mit WireGuard bauen Sie einen sicheren Tunnel zu einem Server auf, um Ihren Node von außen erreichbar zu machen.",
            "wireguard_keys_tooltip": "Erzeugt ein kryptografisches Schlüsselpaar (privat und öffentlich) für Ihre WireGuard-Verbindung. Der öffentliche Schlüssel wird dem Server mitgeteilt, während der private Schlüssel sicher auf Ihrem Computer verbleibt und Ihre Verbindung identifiziert.",
            "wireguard_server_tooltip": "Konfiguriert automatisch einen Linux-Server als WireGuard-Gegenstelle. Das Skript verbindet sich via SSH mit Ihrem Server, installiert WireGuard, richtet die Netzwerkkonfiguration ein und erstellt eine Konfigurationsdatei für Ihren lokalen Client. Dies automatisiert den komplexesten Schritt des Tunnel-Setups.",
            "downloading": "Wird heruntergeladen...",
            "installing": "Wird installiert...",
            "activating": "Wird aktiviert...",
            "deactivating": "Wird deinstalliert...",
            "generating": "Wird generiert...",
            "deleting": "Wird gelöscht...",
            "configuring": "Wird konfiguriert...",
            "cleaning_up": "Wird bereinigt...",
            "connecting": "Verbinde...",
            "uploading": "Lade Skript hoch...",
            "executing": "Führe Skript aus...",
            "downloading_config": "Lade Konfiguration...",
            "restarting_service": "Starte Dienst neu...",
            "checking_status": "Prüfe Status...",
	   },
        "en": {
            "title": "Pi Node Win Setup Helper GUI v2.01 by Fingerkrampf @ github.com/fingerkrampf",
            "needs_admin": "Administrator rights required. Please restart.",
            "restart_needed_title": "Restart Required",
            "restart_needed_text": "Some changes require a reboot. Do you want to reboot now? After the reboot, the tool will start automatically to complete the process.",
            "yes": "Yes",
            "no": "No",
            "info_title": "Help / Information",
            "info_text": (
                "Welcome to the Pi Node Win Setup Helper GUI v2.01!\n\n"
                "This tool helps you install and configure various system components for running a Pi Node.\n\n"
                "LEGAL DISCLAIMER - PLEASE READ CAREFULLY:\n"
                "• This software is provided 'AS IS' without any warranties\n"
                "• Users are solely responsible for complying with all applicable laws\n"
                "• The author (GitHub User Fingerkrampf) is not liable for any damages or losses\n"
                "• Users assume all risks associated with cryptocurrency activities\n"
                "• This tool interacts with third-party software - check their terms\n\n"
                "BEFORE USING:\n"
                "• Ensure you comply with local laws regarding cryptocurrency\n"
                "• Review Pi Network's official terms and conditions\n"
                "• Only use this tool on systems you own or have permission to modify\n"
                "• Maintain adequate backups of your system\n\n"
                "TECHNICAL NOTES:\n"
                "The tool downloads software exclusively from official sources!\n"
                "- Green checkmarks (✓) indicate installed/enabled components\n"
                "- Red crosses (✗) indicate not installed/disabled components\n\n"
                "Developed by GitHub User: Fingerkrampf\n"
                "Github.com/Fingerkrampf\n"
                "License: GPL v3 - See LICENSE file for full terms"
            ),
            "exit": "Exit",
            "help": "Help",
            "github": "GitHub",
            "donate": "Support",
            "donate_title": "Scan QR-Code",
            "donate_text": "Thanks for your support / Danke für Deine Unterstützung.",
            "status_installed": "Installed",
            "status_not_installed": "Not Installed",
            "status_active": "Active",
            "status_not_active": "Not Active",
            "status_configured": "Configured & Connected",
            "status_not_configured": "Not Configured",
            "status_keys_generated": "Keys Generated",
            "status_no_keys": "No Keys",
            "install": "Install",
            "activate": "Activate",
            "deactivate": "Deactivate",
            "configure": "Configure",
            "generate": "Generate",
            "uninstall": "Uninstall",
            "delete": "Delete",
            "firewall_info_title": "Important Note",
            "firewall_info_text": "The Windows Firewall rules have been activated.\n\nPlease remember to also open the TCP ports 31400-31409 in your router (port forwarding) so that your node is accessible from the outside.",
            "wsl_setup": "Windows Features & WSL2 Setup",
            "hibernate": "Hibernate Mode Deactivation",
            "docker": "Docker Desktop",
            "pi_node": "Pi Win Node",
            "firewall": "Windows Firewall Rules (Ports 31400-31409)",
            "wireguard_client": "WireGuard Client",
            "wireguard_keys": "WireGuard Keys (Local)",
            "wireguard_server": "WireGuard Server (Auto-Setup via SSH)",
            "ssh_prompt_title": "SSH Connection Info",
            "ssh_prompt_text": "Please enter the details for the Linux server:",
            "server_ip": "Server IP:",
            "username": "Username:",
            "password": "Password/Sudo Password:",
            "connect": "Connect",
            "wg_activation_title": "Action Required",
            "wg_activation_text": "✅ WireGuard configuration is complete.\n\nPlease open the WireGuard client and click 'Activate' to start the VPN connection.\n\n⚠️ ATTENTION: Only enable the WireGuard connection on the client if UDP port 51820 is listed in the server provider's firewall. Otherwise, you will lose your internet connection until you disable the WireGuard connection on the client.",
            "wg_setup_popup_title": "WireGuard Server Setup...",
            "copy_content": "Copy Content",
            "close": "Close",
            "paste": "Paste",
            "wg_client_note": "Steps 6 through 8 are only necessary if you do not have a dedicated IPv4 address (e.g., with DS-Lite or CG-NAT internet connections). Please note that for this, you will need a Debian-based (i.e. Ubuntu) server with a dedicated IPv4 address and root rights.",
            "wg_setup_finished": "--- ✅ WireGuard setup completed successfully! ---\n⚠️ Note: The UDP port 51820 and the TCP ports 31400 to 31409 must be opened in the firewall of the server provider, which is usually done via their web interface.",
            "wg_setup_failed": "--- ❌ An error occurred: {e} ---",
            "wsl_setup_tooltip": "Activates the 'Windows Subsystem for Linux' (WSL2) and the 'Virtual Machine Platform'. These are the foundation for running Docker Desktop and therefore the Pi Node on your Windows system. The setup requires a reboot.",
            "hibernate_tooltip": "Disables Windows Hibernation mode. This is important to ensure that your computer and the Pi Node run continuously and are reachable at all times. An active node must not go into hibernation.",
            "docker_tooltip": "Installs Docker Desktop. Docker is a platform for creating and running applications in containers. The Pi Node runs in such a Docker container. This ensures that it operates in an isolated and consistent environment.",
            "pi_node_tooltip": "Installs the Pi Node desktop application. This is the graphical user interface that allows you to manage your node, view your status, and interact with the Pi network.",
            "firewall_tooltip": "Creates rules in the Windows Firewall to open the necessary ports for the Pi Node (31400-31409). This allows other nodes in the Pi network to connect to your node. Note: These ports must also be opened in your internet router (port forwarding).",
            "wireguard_client_tooltip": "Installs the WireGuard VPN-client. This is needed if your internet provider does not provide you with a public IPv4 address (e.g., with DS-Lite or CG-NAT). WireGuard allows you to build a secure tunnel to a server to make your node accessible from the outside.",
            "wireguard_keys_tooltip": "Generates a cryptographic key pair (private and public) for your WireGuard connection. The public key is shared with the server, while the private key remains securely on your computer and identifies your connection.",
            "wireguard_server_tooltip": "Automatically configures a Linux server as a WireGuard endpoint. The script connects to your server via SSH, installs WireGuard, sets up the network configuration, and creates a configuration file for your local client. This automates the most complex step of the tunnel setup.",
            "downloading": "Downloading...",
            "installing": "Installing...",
            "activating": "Activating...",
            "deactivating": "Deinstalling...",
            "generating": "Generating...",
            "deleting": "Deleting...",
            "configuring": "Configuring...",
            "cleaning_up": "Cleaning up...",
            "connecting": "Connecting...",
            "uploading": "Uploading script...",
            "executing": "Executing script...",
            "downloading_config": "Downloading config...",
            "restarting_service": "Restarting service...",
            "checking_status": "Checking status...",
        }
    }

def get_initial_lang_code():
    try:
        import locale
        lang_code = locale.getdefaultlocale()[0].split('_')[0]
        return 'de' if lang_code == 'de' else 'en'
    except Exception:
        return 'en'

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def run_as_admin():
    if not is_admin():
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
        sys.exit(0)

def run_command(command, shell=True):
    try:
        result = subprocess.run(command, shell=shell, capture_output=True, text=True, encoding='utf-8', errors='ignore', creationflags=subprocess.CREATE_NO_WINDOW)
        return result.returncode, result.stdout, result.stderr
    except FileNotFoundError:
        return -1, "", "Command not found"
    except Exception as e:
        return -1, "", str(e)

def download_file(url, save_path, status_callback=None):
    callback = status_callback or (lambda text_key: None)
    try:
        callback("downloading")
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        with requests.get(url, stream=True, headers=headers) as r:
            r.raise_for_status()
            with open(save_path, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        return True
    except Exception:
        return False

def set_autostart_once(stage=None):
    try:
        script_path = os.path.abspath(sys.argv[0])
        command = f'"{sys.executable}" "{script_path}"' if script_path.endswith(".py") else f'"{script_path}"'
        if stage:
            command += f' --stage={stage}'
        key_path = r"Software\Microsoft\Windows\CurrentVersion\RunOnce"
        with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:
            winreg.SetValueEx(key, "PiNodeSetupHelper", 0, winreg.REG_SZ, command)
    except Exception:
        pass

class TaskManager:
    def __init__(self, app_instance):
        self.app = app_instance

    def _set_autostart(self, name, path):
        try:
            if not os.path.exists(path):
                return
            key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, key_path, 0, winreg.KEY_SET_VALUE) as key:
                winreg.SetValueEx(key, name, 0, winreg.REG_SZ, f'"{path}"')
        except Exception:
            pass

    def check_wsl_setup_complete(self):
        _, out1, _ = run_command("dism.exe /online /Get-FeatureInfo /FeatureName:Microsoft-Windows-Subsystem-Linux")
        wsl1_active = "State : Enabled" in out1 or "Status : Aktiviert" in out1
        _, out2, _ = run_command("dism.exe /online /Get-FeatureInfo /FeatureName:VirtualMachinePlatform")
        vm_active = "State : Enabled" in out2 or "Status : Aktiviert" in out2
        return wsl1_active and vm_active

    def setup_wsl_full(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        features = ["Microsoft-Windows-Subsystem-Linux", "VirtualMachinePlatform"]
        for feature in features:
            callback("activating")
            run_command(f"dism.exe /online /enable-feature /featurename:{feature} /all /norestart")
        msi_path = os.path.join(os.environ['TEMP'], "wsl_update_x64.msi")
        download_file(URLS["wsl_kernel"], msi_path, status_callback)
        callback("checking_status")
        self.app.prompt_for_restart(stage="wsl_part2")

    def deactivate_wsl_full(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        callback("deactivating")
        run_command("dism.exe /online /disable-feature /featurename:Microsoft-Windows-Subsystem-Linux /norestart")
        run_command("dism.exe /online /disable-feature /featurename:VirtualMachinePlatform /norestart")
        run_command("wsl --unistall")
        callback("checking_status")
        self.app.prompt_for_restart()

    def find_uninstaller_command(self, display_name_substring):
        display_name_substring = display_name_substring.lower()
        uninstall_keys = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
        ]
        for hive, key_path in uninstall_keys:
            try:
                with winreg.OpenKey(hive, key_path) as key:
                    for i in range(winreg.QueryInfoKey(key)[0]):
                        try:
                            subkey_name = winreg.EnumKey(key, i)
                            with winreg.OpenKey(key, subkey_name) as subkey:
                                display_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                                if display_name_substring in display_name.lower():
                                    uninstall_string = winreg.QueryValueEx(subkey, "UninstallString")[0]
                                    if "msiexec" in uninstall_string.lower():
                                        uninstall_string = re.sub(r'/I', '/X', uninstall_string, flags=re.IGNORECASE)
                                        if "/quiet" not in uninstall_string and "/qn" not in uninstall_string:
                                            uninstall_string += " /quiet /norestart"
                                    else:
                                        if "/S" not in uninstall_string.upper() and "/SILENT" not in uninstall_string.upper() and "/VERYSILENT" not in uninstall_string.upper():
                                            uninstall_string += " /S"
                                    return uninstall_string
                        except OSError:
                            continue
            except FileNotFoundError:
                continue
        return None

    def check_program_installed(self, display_name_substring):
        return self.find_uninstaller_command(display_name_substring) is not None

    def check_hibernate_is_active(self):
        _, out, _ = run_command("powercfg /a")
        is_disabled = "Hibernation has not been enabled" in out or "Der Ruhezustand wurde nicht aktiviert" in out
        return not is_disabled

    def activate_hibernate(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        callback("activating")
        run_command("powercfg /hibernate on")
    
    def get_latest_docker_url(self):
        try:
            response = requests.get(URLS["docker_releases_page"])
            response.raise_for_status()
            match = re.search(r'(https://desktop\.docker\.com/win/main/amd64/[\d\.]+/Docker%20Desktop%20Installer\.exe)', response.text)
            if match: return match.group(1)
            return None
        except Exception:
            return None

    def install_docker(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        docker_url = self.get_latest_docker_url()
        if docker_url:
            exe_path = os.path.join(os.environ['TEMP'], "DockerDesktopInstaller.exe")
            if download_file(docker_url, exe_path, status_callback):
                callback("installing")
                run_command(f'"{exe_path}" install --quiet')
                callback("cleaning_up")
                os.remove(exe_path)
                docker_exe_path = os.path.join(os.environ.get("ProgramW6432", "C:\\Program Files"), "Docker", "Docker", "Docker Desktop.exe")
                self._set_autostart("Docker Desktop", docker_exe_path)
                if os.path.exists(docker_exe_path):
                    run_command(f'start "" "{docker_exe_path}"')

    def uninstall_docker(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        command = self.find_uninstaller_command("docker desktop")
        if command:
            callback("deactivating")
            run_command(command)

    def get_latest_pi_node_url(self):
        try:
            response = requests.get(URLS["pi_node_api_latest_release"])
            response.raise_for_status()
            data = response.json()
            for asset in data.get('assets', []):
                if asset.get('name', '').lower().endswith('.exe'):
                    return asset.get('browser_download_url')
            return None
        except Exception:
            return None

    def install_pi_node(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        pi_node_url = self.get_latest_pi_node_url()
        if pi_node_url:
            exe_path = os.path.join(os.environ['TEMP'], "PiNetworkSetup.exe")
            if download_file(pi_node_url, exe_path, status_callback):
                callback("installing")
                run_command(f'"{exe_path}" /S')
                callback("cleaning_up")
                os.remove(exe_path)

    def uninstall_pi_node(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        command = self.find_uninstaller_command("pi network")
        if command:
            callback("deactivating")
            run_command(command)

    def check_firewall_rules(self):
        rule_name = "PiNodePorts-TCP"
        code, _, _ = run_command(f'netsh advfirewall firewall show rule name="{rule_name}"')
        return code == 0

    def activate_firewall_rules(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        callback("activating")
        self.app.show_firewall_info_popup()
        rule_name = "PiNodePorts-TCP"
        run_command(f'netsh advfirewall firewall add rule name="{rule_name}" dir=in action=allow protocol=TCP localport=31400-31409')
        run_command(f'netsh advfirewall firewall add rule name="{rule_name}" dir=out action=allow protocol=TCP localport=31400-31409')

    def delete_firewall_rules(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        callback("deleting")
        run_command('netsh advfirewall firewall delete rule name="PiNodePorts-TCP"')
        
    def install_wireguard_client(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        exe_path = os.path.join(os.environ['TEMP'], "wireguard-installer.exe")
        if download_file(URLS["wireguard_installer"], exe_path, status_callback):
            callback("installing")
            run_command(f'"{exe_path}" /S')
            callback("cleaning_up")
            os.remove(exe_path)
            wg_dir = self.get_wg_path()
            if wg_dir:
                wg_exe_path = os.path.join(wg_dir, "wireguard.exe")
                self._set_autostart("WireGuard", wg_exe_path)

    def uninstall_wireguard(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        command = self.find_uninstaller_command("wireguard")
        if command:
            callback("deactivating")
            run_command(command)

    def get_wg_path(self):
        uninstall_keys = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"),
        ]
        for hive, key_path in uninstall_keys:
            try:
                with winreg.OpenKey(hive, key_path) as key:
                    for i in range(winreg.QueryInfoKey(key)[0]):
                        try:
                            subkey_name = winreg.EnumKey(key, i)
                            with winreg.OpenKey(key, subkey_name) as subkey:
                                display_name = winreg.QueryValueEx(subkey, "DisplayName")[0]
                                if "wireguard" in display_name.lower():
                                    install_path = winreg.QueryValueEx(subkey, "InstallLocation")[0]
                                    if install_path and os.path.isdir(install_path) and os.path.exists(os.path.join(install_path, "wireguard.exe")):
                                        return install_path
                        except OSError:
                            continue
            except FileNotFoundError:
                continue
        for pf_env in ["ProgramW6432", "ProgramFiles", "ProgramFiles(x86)"]:
            program_files = os.environ.get(pf_env)
            if program_files:
                path = os.path.join(program_files, "WireGuard")
                if os.path.isdir(path) and os.path.exists(os.path.join(path, "wireguard.exe")):
                    return path
        return ""

    def _generate_wg_keys(self):
        wg_path = self.get_wg_path()
        if not wg_path or not os.path.exists(os.path.join(wg_path, "wg.exe")): return None
        wg_exe = os.path.join(wg_path, "wg.exe")
        try:
            private_key = subprocess.check_output(f'"{wg_exe}" genkey', shell=True, creationflags=subprocess.CREATE_NO_WINDOW).decode('utf-8').strip()
            public_key = subprocess.check_output(f'echo {private_key} | "{wg_exe}" pubkey', shell=True, creationflags=subprocess.CREATE_NO_WINDOW).decode('utf-8').strip()
            return {"private": private_key, "public": public_key}
        except Exception:
            return None

    def check_wireguard_keys(self):
        key_file_path = os.path.join(os.path.expanduser("~"), "wireguard_client_keys.json")
        return os.path.exists(key_file_path)

    def generate_wireguard_keys(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        callback("generating")
        key_file_path = os.path.join(os.path.expanduser("~"), "wireguard_client_keys.json")
        if not self.check_wireguard_keys():
            keys = self._generate_wg_keys()
            if keys:
                with open(key_file_path, 'w') as f:
                    json.dump(keys, f)

    def delete_wireguard_keys(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        callback("deleting")
        key_file_path = os.path.join(os.path.expanduser("~"), "wireguard_client_keys.json")
        if os.path.exists(key_file_path):
            os.remove(key_file_path)

    def check_wireguard_server_config(self):
        wg_path = self.get_wg_path()
        if not wg_path: return False
        wg_exe = os.path.join(wg_path, "wg.exe")
        if not os.path.exists(wg_exe): return False
        code, out, err = run_command(f'"{wg_exe}" show')
        return code == 0 and "latest handshake" in out

    def configure_wireguard_server(self, status_callback=None):
        callback = status_callback or (lambda text_key: None)
        if paramiko is None:
            self.app.show_info_dialog("Error", "'paramiko' module not found.\nPlease install with: pip install paramiko")
            return
        key_file_path = os.path.join(os.path.expanduser("~"), "wireguard_client_keys.json")
        if not os.path.exists(key_file_path):
            self.app.show_info_dialog("Error", "Local WireGuard keys not found.\nPlease 'Generate' first.")
            return
        with open(key_file_path, 'r') as f:
            client_keys = json.load(f)
        dialog = SSHLoginDialog(self.app, self.app.lang)
        ssh_details = dialog.get_input()
        if not ssh_details or not ssh_details['ip']:
            return
        popup = self.app.show_output_popup(self.app.lang["wg_setup_popup_title"])
        thread = threading.Thread(target=self._ssh_worker, args=(ssh_details, client_keys, popup, callback), daemon=True)
        thread.start()

    def _ssh_worker(self, details, client_keys, popup, status_callback):
        def log_to_popup(message):
            self.app.after(0, lambda: popup.add_text(message))
        
        def set_status(text_key):
            status_callback(text_key)
            log_to_popup(f"[{text_key.upper()}]...\n")

        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client_name = WIREGUARD_CLIENT_NAME
        client_public_key = client_keys['public']
        server_setup_script = f"""
#!/usr/bin/env bash
set -e
if [[ $EUID -ne 0 ]]; then echo "ERROR: This script must be run as root." >&2; exit 1; fi
CLIENT_NAME="{client_name}"
CLIENT_PUBLIC_KEY="{client_public_key}"
echo "--- Starting WireGuard Peer Setup for '$CLIENT_NAME' ---"
echo "Updating package list and installing dependencies (wireguard, iptables-persistent, curl)..."
export DEBIAN_FRONTEND=noninteractive
apt-get update -y
apt-get install -y wireguard iptables-persistent curl
echo "Ensuring iptables-legacy is used..."
update-alternatives --set iptables /usr/sbin/iptables-legacy
SERVER_CONFIG_FILE="/etc/wireguard/wg0.conf"
if [ ! -f "$SERVER_CONFIG_FILE" ]; then
    echo "Server config '$SERVER_CONFIG_FILE' not found. Creating a new one..."
    DEFAULT_INTERFACE=$(ip -4 route get 8.8.8.8 | awk '{{print $5; exit}}')
    SERVER_IP=$(curl -4 -s https://ifconfig.me)
    if [[ -z "$DEFAULT_INTERFACE" || -z "$SERVER_IP" ]]; then echo "ERROR: Could not determine default network interface or public IP." >&2; exit 1; fi
    echo "Determined default interface: $DEFAULT_INTERFACE"
    echo "Determined public IP: $SERVER_IP"
    mkdir -p /etc/wireguard; chmod 700 /etc/wireguard; umask 077
    wg genkey | tee /etc/wireguard/server_private.key | wg pubkey > /etc/wireguard/server_public.key
    SERVER_PRIVATE_KEY=$(cat /etc/wireguard/server_private.key)
    cat <<EOF > "$SERVER_CONFIG_FILE"
[Interface]
Address = 192.168.200.1/24
ListenPort = 51820
PrivateKey = $SERVER_PRIVATE_KEY
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE 
PostDown = iptables -D FORWARD -i %i -j ACCEPT 2>/dev/null || true; iptables -t nat -D POSTROUTING -o $DEFAULT_INTERFACE -j MASQUERADE 2>/dev/null || true
MTU = 1390
EOF
    echo "Starting and enabling WireGuard service (wg-quick@wg0)..."
    wg-quick up wg0
    systemctl enable wg-quick@wg0
else
    echo "Existing server config found at '$SERVER_CONFIG_FILE'."
fi
if grep -q "$CLIENT_PUBLIC_KEY" "$SERVER_CONFIG_FILE"; then
    echo "Peer with this public key already exists. Re-using existing configuration."
else
    echo "Adding new peer '$CLIENT_NAME' to the configuration..."
    LAST_IP_OCTET=$(grep -o '192\\.168\\.200\\.[0-9]*' "$SERVER_CONFIG_FILE" | cut -d . -f 4 | sort -n | tail -1)
    if [[ -z "$LAST_IP_OCTET" ]]; then NEXT_IP_OCTET=2; else NEXT_IP_OCTET=$((LAST_IP_OCTET + 1)); fi
    CLIENT_VPN_IP="192.168.200.${{NEXT_IP_OCTET}}"
    echo "Assigning IP $CLIENT_VPN_IP to new peer."
    cat <<EOF >> "$SERVER_CONFIG_FILE"

[Peer]
PublicKey = {client_public_key}
AllowedIPs = ${{CLIENT_VPN_IP}}/32
EOF
    echo "Applying new peer configuration to the live interface..."
    wg set wg0 peer "$CLIENT_PUBLIC_KEY" allowed-ips "${{CLIENT_VPN_IP}}/32"
fi
CLIENT_VPN_IP=192.168.200.2
SERVER_PUBLIC_KEY=$(cat /etc/wireguard/server_public.key)
SERVER_IP=$(grep -m 1 'Endpoint' "$SERVER_CONFIG_FILE" | cut -d '=' -f 2 | tr -d ' ' | cut -d ':' -f 1)
if [[ -z "$SERVER_IP" ]]; then SERVER_IP=$(curl -4 -s https://ifconfig.me); fi
CLIENT_CONFIG_FILE="/etc/wireguard/$CLIENT_NAME.conf"
echo "Generating client config file at '$CLIENT_CONFIG_FILE'..."
cat <<EOF > "$CLIENT_CONFIG_FILE"
[Interface]
PrivateKey = CLIENT_PRIVATE_KEY_PLACEHOLDER
Address = ${{CLIENT_VPN_IP}}/24
DNS = 1.1.1.1, 8.8.8.8
MTU = 1390

[Peer]
PublicKey = $SERVER_PUBLIC_KEY
Endpoint = $SERVER_IP:51820
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF
echo "Setting up advanced firewall rules..."
DEFAULT_INTERFACE=$(ip -4 route get 8.8.8.8 | awk '{{print $5; exit}}')
if [ -z "$DEFAULT_INTERFACE" ]; then echo "ERROR: Could not find default network interface for firewall rules!" >&2; exit 1; fi
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -F
iptables -t nat -F
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -i "$DEFAULT_INTERFACE" -p udp --dport 51820 -j ACCEPT
iptables -A INPUT -p icmp -j ACCEPT
iptables -A INPUT -i "$DEFAULT_INTERFACE" -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -P INPUT DROP
iptables -A FORWARD -i wg0 -o "$DEFAULT_INTERFACE" -j ACCEPT 
iptables -A FORWARD -i "$DEFAULT_INTERFACE" -o wg0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables -t nat -A PREROUTING -i "$DEFAULT_INTERFACE" -p tcp -m multiport --dport 31400:31409 -j DNAT --to-destination $CLIENT_VPN_IP
iptables -P FORWARD ACCEPT
echo "Enabling IPv4 forwarding..."
sysctl -w net.ipv4.ip_forward=1 > /dev/null
if [ ! -f /etc/sysctl.d/99-pivpn.conf ]; then
    echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/99-pivpn.conf
fi
echo "Saving firewall rules to be persistent on reboot..."
netfilter-persistent save
echo "Restarting WireGuard to apply all changes..."
wg-quick down wg0 2>/dev/null || true
wg-quick up wg0
echo "CLIENT_CONFIG_PATH:$CLIENT_CONFIG_FILE"
"""
        remote_script_path = f"/tmp/setup_{client_name}.sh"
        try:
            set_status("connecting")
            client.connect(details['ip'], username=details['user'], password=details['pass'], timeout=15)
            set_status("uploading")
            with client.open_sftp() as sftp:
                with sftp.file(remote_script_path, 'w') as f: f.write(server_setup_script)
                sftp.chmod(remote_script_path, 0o755)
            set_status("executing")
            command = f"sudo -S bash {remote_script_path}"
            stdin, stdout, stderr = client.exec_command(command, get_pty=True)
            stdin.write(details['pass'] + '\\n'); stdin.flush()
            full_output = ""
            for line in iter(stdout.readline, ""):
                log_to_popup(line); full_output += line
            exit_status = stdout.channel.recv_exit_status()
            if exit_status != 0:
                error_output = stderr.read().decode('utf-8', errors='ignore')
                log_to_popup(f"\n--- STDERR ---\n{error_output}")
                raise Exception(f"Server script failed with exit code {exit_status}.")
            remote_conf_path_match = [line for line in full_output.splitlines() if line.startswith("CLIENT_CONFIG_PATH:")]
            if not remote_conf_path_match: raise Exception("Could not find the client config file path in the script output.")
            remote_conf_path = remote_conf_path_match[0].split(":", 1)[1].strip()
            set_status("downloading_config")
            wg_path = self.get_wg_path()
            if not wg_path: raise Exception("Could not find local WireGuard installation path.")
            local_conf_path = os.path.join(wg_path, "Data", "Configurations", f"{client_name}.conf.tmp")
            with client.open_sftp() as sftp:
                sftp.get(remote_conf_path, local_conf_path)
            log_to_popup("Customizing local configuration with private key...\n")
            with open(local_conf_path, 'r') as f: content = f.read()
            updated_content = content.replace("CLIENT_PRIVATE_KEY_PLACEHOLDER", client_keys['private'])
            final_conf_path = os.path.join(wg_path, "Data", "Configurations", f"{client_name}.conf")
            with open(final_conf_path, 'w') as f: f.write(updated_content)
            os.remove(local_conf_path)
            set_status("restarting_service")
            wg_exe_path = os.path.join(wg_path, "wireguard.exe")
            run_command(f'taskkill /f /im wireguard.exe', shell=False); time.sleep(1)
            run_command(f'"{wg_exe_path}" /uninstallservice {client_name}'); time.sleep(1)
            run_command(f'"{wg_exe_path}" /installservice "{final_conf_path}"'); time.sleep(1)
            run_command(f'start "" "{wg_exe_path}"')
            set_status("cleaning_up")
            stdin, _, _ = client.exec_command(f"sudo -S rm {remote_script_path} {remote_conf_path}", get_pty=True)
            stdin.write(details['pass'] + '\\n'); stdin.flush()
            log_to_popup(f"\n{self.app.lang['wg_setup_finished']}\n")
            self.app.after(0, lambda: self.app.show_info_dialog(self.app.lang["wg_activation_title"], self.app.lang["wg_activation_text"]))
        except Exception as e:
            log_to_popup(f"\n{self.app.lang['wg_setup_failed'].format(e=e)}\n")
        finally:
            if client: client.close()

class Tooltip:
    def __init__(self, widget, text):
        self.widget = widget
        self.text = text
        self.tooltip_window = None
        self.widget.bind("<Enter>", self.show_tooltip)
        self.widget.bind("<Leave>", self.hide_tooltip)

    def show_tooltip(self, event=None):
        if self.tooltip_window or not self.text:
            return
        x, y, _, _ = self.widget.bbox("insert")
        x += self.widget.winfo_rootx() + 20
        y += self.widget.winfo_rooty() + 20
        self.tooltip_window = tw = ctk.CTkToplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry(f"+{x}+{y}")
        label = ctk.CTkLabel(tw, text=self.text, justify='left',
                             fg_color=("#DDDDDD", "#333333"), text_color=("#1F1F1F", "#FFFFFF"),
                             wraplength=400, corner_radius=6, padx=8, pady=5, font=ctk.CTkFont(size=12))
        label.pack(ipadx=1)

    def hide_tooltip(self, event=None):
        if self.tooltip_window:
            self.tooltip_window.destroy()
        self.tooltip_window = None

    def update_text(self, new_text):
        self.text = new_text

class App(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.icon_path = None
        self.languages = get_all_langs()
        self.lang_code = get_initial_lang_code()
        self.lang = self.languages[self.lang_code]
        self.title(self.lang["title"])
        self._setup_icon()
        
        window_width = 900
        window_height = 900
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        ctk.set_appearance_mode("Dark")
        ctk.set_default_color_theme("blue")
        self.status_colors = {"active": ("#C8F7C8", "#1E3A2E"), "inactive": ("#FFD0D0", "#4C2C2C")}
        self.task_manager = TaskManager(self)
        self.task_widgets = {}
        self.tasks = {}
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(pady=10, padx=10, fill="both", expand=True)
        self.scrollable_frame = ctk.CTkScrollableFrame(self.main_frame, fg_color="transparent")
        self.scrollable_frame.pack(fill="both", expand=True, padx=5, pady=5)
        self.create_all_tasks()
        self.bottom_frame = ctk.CTkFrame(self)
        self.bottom_frame.pack(fill="x", side="bottom", padx=10, pady=10)
        
        self.exit_button = ctk.CTkButton(self.bottom_frame, text=self.lang["exit"], command=self.on_closing)
        self.exit_button.pack(side="left", padx=10, pady=10)
        self.help_button = ctk.CTkButton(self.bottom_frame, text=self.lang["help"], command=self.show_info)
        self.help_button.pack(side="left", padx=10, pady=10)
        self.github_button = ctk.CTkButton(self.bottom_frame, text=self.lang["github"], command=self.open_github)
        self.github_button.pack(side="left", padx=10, pady=10)
        self.donate_button = ctk.CTkButton(self.bottom_frame, text=self.lang["donate"], command=self.show_donation_popup)
        self.donate_button.pack(side="left", padx=10, pady=10)
        
        self.mode_switch = ctk.CTkSwitch(self.bottom_frame, text="Dark Mode", command=self.toggle_dark_mode)
        self.mode_switch.pack(side="right", padx=10, pady=10)
        self.mode_switch.select()
        self.lang_switch = ctk.CTkSwitch(self.bottom_frame, text="DE / EN", command=self.toggle_language)
        self.lang_switch.pack(side="right", padx=10, pady=10)
        if self.lang_code == 'en': self.lang_switch.select()

        self.is_running = True
        self.status_thread = threading.Thread(target=self.periodic_status_checker, daemon=True)
        self.status_thread.start()
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

    def _setup_icon(self):
        if not ICON_BASE64: return
        try:
            icon_data = base64.b64decode(ICON_BASE64)
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ico') as icon_file:
                icon_file.write(icon_data)
                self.icon_path = icon_file.name
            self.iconbitmap(self.icon_path)
        except Exception:
            self.icon_path = None
        
    def on_closing(self):
        self.is_running = False
        if hasattr(self, 'icon_path') and self.icon_path and os.path.exists(self.icon_path):
            os.remove(self.icon_path)
        self.destroy()

    def periodic_status_checker(self):
        while self.is_running:
            try:
                for name in self.tasks.keys():
                    if not self.is_running: break
                    is_active = self.tasks[name]["check"]()
                    if self.is_running:
                        self.after(0, self.update_task_ui, name, is_active)
                time.sleep(5)
            except Exception:
                time.sleep(5)

    def toggle_dark_mode(self):
        ctk.set_appearance_mode("Dark" if self.mode_switch.get() == 1 else "Light")

    def toggle_language(self):
        self.lang_code = "en" if self.lang_switch.get() == 1 else "de"
        self.lang = self.languages[self.lang_code]
        self.retranslate_ui()

    def retranslate_ui(self):
        self.title(self.lang["title"])
        self.help_button.configure(text=self.lang["help"])
        self.exit_button.configure(text=self.lang["exit"])
        self.github_button.configure(text=self.lang["github"])
        self.donate_button.configure(text=self.lang["donate"])
        if hasattr(self, 'wg_note_label'):
            self.wg_note_label.configure(text=self.lang["wg_client_note"])
        
        for name, widgets in self.task_widgets.items():
            widgets["label"].configure(text=self.lang[name])
            tooltip_text = self.lang.get(f"{name}_tooltip", "")
            if hasattr(widgets["info_icon"], "tooltip"):
                widgets["info_icon"].tooltip.update_text(tooltip_text)
        
        self.force_ui_update()

    def force_ui_update(self):
        for name in self.tasks.keys():
            is_active = self.tasks[name]["check"]()
            self.update_task_ui(name, is_active)

    def create_task_frame(self, name, title, number):
        frame = ctk.CTkFrame(self.scrollable_frame, fg_color=("gray85", "gray20"), corner_radius=10)
        frame.pack(fill="x", padx=10, pady=6)
        frame.grid_columnconfigure(1, weight=1)
        prominent_text_color = ("#1F1F1F", "#FFFFFF") 
        number_label = ctk.CTkLabel(frame, text=str(number), font=ctk.CTkFont(size=40, weight="bold"), text_color=prominent_text_color)
        number_label.grid(row=0, column=0, rowspan=2, padx=15, pady=10, sticky="ns")
        label = ctk.CTkLabel(frame, text=title, anchor="w", font=ctk.CTkFont(size=14, weight="bold"), text_color=prominent_text_color)
        label.grid(row=0, column=1, padx=10, pady=(10, 0), sticky="w")
        status_label = ctk.CTkLabel(frame, text="?", width=200, anchor="w", text_color=prominent_text_color)
        status_label.grid(row=1, column=1, padx=10, pady=(0, 10), sticky="w")
        
        info_icon = ctk.CTkLabel(frame, text="ⓘ", font=ctk.CTkFont(size=24), text_color=("gray50", "gray50"), cursor="hand2")
        info_icon.grid(row=0, column=2, rowspan=2, padx=5, sticky="w")
        info_icon.tooltip = Tooltip(info_icon, self.lang.get(f"{name}_tooltip", ""))

        button = ctk.CTkButton(frame, text="...")
        button.grid(row=0, column=3, rowspan=2, padx=10, pady=10, sticky="e")
        uninstall_button = ctk.CTkButton(frame, text="...", fg_color="#D32F2F", hover_color="#B71C1C")
        uninstall_button.grid(row=0, column=3, rowspan=2, padx=10, pady=10, sticky="e")
        status_icon = ctk.CTkLabel(frame, text="", font=("Arial", 24))
        status_icon.grid(row=0, column=4, rowspan=2, padx=(0,10), pady=10, sticky="e")
        
        progressbar = ctk.CTkProgressBar(frame, orientation="horizontal", indeterminate_speed=1.5)
        status_text_label = ctk.CTkLabel(frame, text="", anchor="w", font=ctk.CTkFont(size=12, slant="italic"))

        self.task_widgets[name] = {
            "frame": frame, "label": label, "status_icon": status_icon, 
            "status_label": status_label, "button": button, "progressbar": progressbar,
            "status_text_label": status_text_label, "number_label": number_label, 
            "uninstall_button": uninstall_button, "info_icon": info_icon
        }

    def create_all_tasks(self):
        all_tasks_definition = {
            "wsl_setup": {"type": "activate", "check": self.task_manager.check_wsl_setup_complete, "action": self.task_manager.setup_wsl_full, "uninstall_action": self.task_manager.deactivate_wsl_full},
            "hibernate": {"type": "activate", "check": self.task_manager.check_hibernate_is_active, "action": self.task_manager.activate_hibernate},
            "docker": {"type": "install", "check": lambda: self.task_manager.check_program_installed("docker desktop"), "action": self.task_manager.install_docker, "uninstall_action": self.task_manager.uninstall_docker},
            "pi_node": {"type": "install", "check": lambda: self.task_manager.check_program_installed("pi network"), "action": self.task_manager.install_pi_node, "uninstall_action": self.task_manager.uninstall_pi_node},
            "firewall": {"type": "activate", "check": self.task_manager.check_firewall_rules, "action": self.task_manager.activate_firewall_rules, "uninstall_action": self.task_manager.delete_firewall_rules},
            "wireguard_client": {"type": "install", "check": lambda: self.task_manager.check_program_installed("wireguard"), "action": self.task_manager.install_wireguard_client, "uninstall_action": self.task_manager.uninstall_wireguard},
            "wireguard_keys": {"type": "generate", "check": self.task_manager.check_wireguard_keys, "action": self.task_manager.generate_wireguard_keys, "uninstall_action": self.task_manager.delete_wireguard_keys},
            "wireguard_server": {"type": "configure", "check": self.task_manager.check_wireguard_server_config, "action": self.task_manager.configure_wireguard_server},
        }

        task_names_in_order = [
            "wsl_setup",
            "hibernate",
            "firewall",
            "docker",
            "pi_node",
            "wireguard_client",
            "wireguard_keys",
            "wireguard_server",
        ]
        
        self.tasks = {name: all_tasks_definition[name] for name in task_names_in_order}

        for i, name in enumerate(self.tasks):
            self.create_task_frame(name, self.lang[name], i + 1)
        self.add_wireguard_note()
        self.force_ui_update()

    def add_wireguard_note(self):
        self.wg_note_label = ctk.CTkLabel(self.scrollable_frame, text=self.lang["wg_client_note"], font=ctk.CTkFont(size=16, slant="italic"), wraplength=700, justify="center", anchor="center")
        wireguard_client_frame = self.task_widgets["wireguard_client"]["frame"]
        self.wg_note_label.pack(padx=10, pady=(15, 5), before=wireguard_client_frame)

    def update_task_ui(self, name, is_active):
        if not self.winfo_exists():
            return
        widgets = self.task_widgets[name]
        task_info = self.tasks[name]
        widgets["frame"].configure(fg_color=self.status_colors["active"] if is_active else self.status_colors["inactive"])
        widgets["status_icon"].configure(text=("✓" if is_active else "✗"), text_color=("#4ade80" if is_active else "#f87171"))
        
        task_type = task_info["type"]
        actions = {
            "install": (self.lang["status_installed"], self.lang["status_not_installed"], self.lang["install"], self.lang["uninstall"]),
            "activate": (self.lang["status_active"], self.lang["status_not_active"], self.lang["activate"], self.lang["deactivate"]),
            "generate": (self.lang["status_keys_generated"], self.lang["status_no_keys"], self.lang["generate"], self.lang["delete"]),
            "configure": (self.lang["status_configured"], self.lang["status_not_configured"], self.lang["configure"], self.lang["delete"]),
        }
        
        active_status, inactive_status, button_text, uninstall_button_text = actions[task_type]
            
        widgets["status_label"].configure(text=active_status if is_active else inactive_status)
        widgets["button"].configure(text=button_text)
        widgets["uninstall_button"].configure(text=uninstall_button_text)

        if is_active:
            widgets["button"].grid_forget()
            if "uninstall_action" in task_info:
                widgets["uninstall_button"].grid(row=0, column=3, rowspan=2, padx=10, pady=10, sticky="e")
                widgets["uninstall_button"].configure(state="normal", command=lambda n=name: self.run_task_with_progress(n, 'uninstall_action'))
            else:
                widgets["uninstall_button"].grid_forget()
        else:
            widgets["uninstall_button"].grid_forget()
            widgets["button"].grid(row=0, column=3, rowspan=2, padx=10, pady=10, sticky="e")
            widgets["button"].configure(state="normal", command=lambda n=name: self.run_task_with_progress(n, 'action'))

    def set_status_text(self, name, text_key):
        if not self.winfo_exists():
            return
        try:
            text = self.lang.get(text_key, text_key + "...")
            widgets = self.task_widgets[name]
            widgets["status_text_label"].configure(text=text)
        except Exception:
            pass

    def disable_all_controls(self):
        self.help_button.configure(state="disabled")
        self.lang_switch.configure(state="disabled")
        self.mode_switch.configure(state="disabled")
        self.exit_button.configure(state="disabled")
        self.github_button.configure(state="disabled")
        self.donate_button.configure(state="disabled")
        
        for widgets in self.task_widgets.values():
            widgets["button"].configure(state="disabled")
            widgets["uninstall_button"].configure(state="disabled")
            if hasattr(widgets["info_icon"], "tooltip"):
                widgets["info_icon"].unbind("<Enter>")
                widgets["info_icon"].unbind("<Leave>")
                widgets["info_icon"].tooltip.hide_tooltip()

    def enable_all_controls(self):
        if not self.winfo_exists():
            return
        self.help_button.configure(state="normal")
        self.lang_switch.configure(state="normal")
        self.mode_switch.configure(state="normal")
        self.exit_button.configure(state="normal")
        self.github_button.configure(state="normal")
        self.donate_button.configure(state="normal")

        for widgets in self.task_widgets.values():
            if hasattr(widgets["info_icon"], "tooltip"):
                widgets["info_icon"].bind("<Enter>", widgets["info_icon"].tooltip.show_tooltip)
                widgets["info_icon"].bind("<Leave>", widgets["info_icon"].tooltip.hide_tooltip)
        
        self.force_ui_update()

    def run_task_with_progress(self, name, action_type='action', disable_uninstall=False):
        action_func = self.tasks[name].get(action_type)
        if not action_func: return

        self.disable_all_controls()
        widgets = self.task_widgets[name]
        
        status_callback = lambda text_key: self.after(0, self.set_status_text, name, text_key)

        def thread_worker():
            try:
                action_func(status_callback=status_callback)
            finally:
                if self.is_running:
                    self.after(0, post_run_cleanup)

        def post_run_cleanup():
            if self.winfo_exists():
                widgets["progressbar"].stop()
                widgets["progressbar"].grid_forget()
                widgets["status_text_label"].configure(text="")
                widgets["status_text_label"].grid_forget()
                widgets["status_label"].grid(row=1, column=1, padx=10, pady=(0, 10), sticky="w")
                self.enable_all_controls()

        widgets["status_label"].grid_forget()
        widgets["progressbar"].grid(row=1, column=1, padx=10, pady=(0,10), sticky="ew")
        widgets["status_text_label"].grid(row=2, column=1, columnspan=2, padx=10, pady=(0,5), sticky="w")
        widgets["progressbar"].start()
        threading.Thread(target=thread_worker, daemon=True).start()

    def show_info(self):
        self.show_info_dialog(self.lang["info_title"], self.lang["info_text"])

    def show_firewall_info_popup(self):
        self.show_info_dialog(self.lang["firewall_info_title"], self.lang["firewall_info_text"])

    def show_info_dialog(self, title, text):
        dialog = ctk.CTkToplevel(self)
        dialog.title(title)
        dialog.transient(self)
        dialog.grab_set()
        dialog.attributes("-topmost", True)
        label = ctk.CTkLabel(dialog, text=text, wraplength=560, justify="left", font=ctk.CTkFont(size=14))
        label.pack(padx=20, pady=20, expand=True)
        ok_button = ctk.CTkButton(dialog, text="OK", command=dialog.destroy, width=100)
        ok_button.pack(pady=10)
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

    def prompt_for_restart(self, stage=None):
        dialog = ctk.CTkToplevel(self)
        dialog.title(self.lang["restart_needed_title"])
        dialog.geometry("400x150")
        dialog.transient(self)
        dialog.grab_set()
        dialog.attributes("-topmost", True)
        def handle_yes():
            set_autostart_once(stage=stage)
            dialog.destroy()
            run_command("shutdown /r /t 1")
        text = self.lang["restart_needed_text"]
        if stage == "wsl_part2":
             text = "Einige Änderungen erfordern einen Neustart. Möchten Sie jetzt neu starten? Nach dem Neustart startet das Tool automatisch, und im sich öffnenden Konsolenfenster muss eine beliebige Taste gedrückt werden um die Installation von WSL2 zu starten." if self.lang_code == 'de' else "Some changes require a reboot. Do you want to reboot now? After the reboot, the tool will start automatically, and you must press any key in the console window that opens to start the installation of WSL2."
        label = ctk.CTkLabel(dialog, text=text, wraplength=380)
        label.pack(padx=10, pady=10, expand=True)
        yes_button = ctk.CTkButton(dialog, text=self.lang["yes"], command=handle_yes)
        yes_button.pack(side="left", padx=20, pady=10)
        no_button = ctk.CTkButton(dialog, text=self.lang["no"], command=dialog.destroy)
        no_button.pack(side="right", padx=20, pady=10)
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

    def show_output_popup(self, title):
        popup = OutputPopup(self, title, self.lang)
        return popup

    def open_github(self):
        webbrowser.open_new_tab("https://github.com/Fingerkrampf")

    def show_donation_popup(self):
        dialog = ctk.CTkToplevel(self)
        dialog.title(self.lang["donate"])
        dialog.transient(self)
        dialog.grab_set()
        dialog.attributes("-topmost", True)

        title_label = ctk.CTkLabel(dialog, text=self.lang["donate_title"], font=ctk.CTkFont(size=20, weight="bold"))
        title_label.pack(padx=20, pady=(20, 10))

        if not DONATION_QR_BASE64:
            error_label = ctk.CTkLabel(dialog, text="QR Code Base64 string not set in script.", text_color="red")
            error_label.pack(padx=20, pady=10, expand=True)
        else:
            try:
                image_data = base64.b64decode(DONATION_QR_BASE64)
                image = Image.open(io.BytesIO(image_data))
                ctk_image = ctk.CTkImage(light_image=image, dark_image=image, size=(image.width, image.height))
                qr_label = ctk.CTkLabel(dialog, image=ctk_image, text="")
                qr_label.pack(padx=20, pady=10)
            except Exception as e:
                error_label = ctk.CTkLabel(dialog, text=f"Failed to load QR code: {e}", text_color="red", wraplength=300)
                error_label.pack(padx=20, pady=10, expand=True)

        text_label = ctk.CTkLabel(dialog, text=self.lang["donate_text"], font=ctk.CTkFont(size=14))
        text_label.pack(padx=20, pady=(5, 10))

        ok_button = ctk.CTkButton(dialog, text="OK", command=dialog.destroy, width=100)
        ok_button.pack(pady=(10, 20))
        
        dialog.update_idletasks()
        x = self.winfo_x() + (self.winfo_width() - dialog.winfo_width()) // 2
        y = self.winfo_y() + (self.winfo_height() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")

class OutputPopup(ctk.CTkToplevel):
    def __init__(self, parent, title, lang):
        super().__init__(parent)
        self.lang = lang
        self.title(title)
        self.geometry("800x500")
        self.transient(parent)
        self.grab_set()
        self.attributes("-topmost", True)
        self.textbox = ctk.CTkTextbox(self, state="normal", wrap="word")
        self.textbox.pack(expand=True, fill="both", padx=10, pady=10)
        self.button_frame = ctk.CTkFrame(self)
        self.button_frame.pack(fill="x", padx=10, pady=(0, 10))
        self.copy_button = ctk.CTkButton(self.button_frame, text=self.lang["copy_content"], command=self.copy_to_clipboard)
        self.copy_button.pack(side="left", padx=10, pady=5)
        self.close_button = ctk.CTkButton(self.button_frame, text=self.lang["close"], command=self.destroy)
        self.close_button.pack(side="right", padx=10, pady=5)
        
        self.update_idletasks()
        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()
        self_width = self.winfo_width()
        self_height = self.winfo_height()
        x = parent_x + (parent_width - self_width) // 2
        y = parent_y + (parent_height - self_height) // 2
        self.geometry(f"+{x}+{y}")

    def add_text(self, text):
        if self.winfo_exists():
            self.textbox.insert("end", text)
            self.textbox.see("end")
            self.update_idletasks()

    def copy_to_clipboard(self):
        self.clipboard_clear()
        self.clipboard_append(self.textbox.get("1.0", "end"))
        self.update()

class SSHLoginDialog(ctk.CTkToplevel):
    def __init__(self, parent, lang):
        super().__init__(parent)
        self.transient(parent)
        self.lang = lang
        self.title(self.lang["ssh_prompt_title"])
        self.geometry("350x250")
        self._result = None
        self.focused_widget = None
        label = ctk.CTkLabel(self, text=self.lang["ssh_prompt_text"])
        label.pack(padx=10, pady=10)
        self.ip_entry = ctk.CTkEntry(self, placeholder_text=self.lang["server_ip"])
        self.ip_entry.pack(padx=10, pady=5, fill="x")
        self.user_entry = ctk.CTkEntry(self, placeholder_text=self.lang["username"])
        self.user_entry.pack(padx=10, pady=5, fill="x")
        self.pass_entry = ctk.CTkEntry(self, placeholder_text=self.lang["password"], show="*")
        self.pass_entry.pack(padx=10, pady=5, fill="x")
        connect_button = ctk.CTkButton(self, text=self.lang["connect"], command=self._on_ok)
        connect_button.pack(pady=10)
        self.menu = tkinter.Menu(self, tearoff=0)
        self.menu.add_command(label=self.lang["paste"], command=self.paste_from_clipboard)
        self.ip_entry.bind("<Button-3>", self.show_menu)
        self.user_entry.bind("<Button-3>", self.show_menu)
        self.pass_entry.bind("<Button-3>", self.show_menu)
        self.grab_set()
        self.attributes("-topmost", True)
        self.pass_entry.bind("<Return>", self._on_ok)
        
        self.update_idletasks()
        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()
        self_width = self.winfo_width()
        self_height = self.winfo_height()
        x = parent_x + (parent_width - self_width) // 2
        y = parent_y + (parent_height - self_height) // 2
        self.geometry(f"+{x}+{y}")

    def show_menu(self, event):
        self.focused_widget = event.widget
        self.menu.post(event.x_root, event.y_root)

    def paste_from_clipboard(self):
        if self.focused_widget:
            try:
                self.focused_widget.delete(0, 'end')
                self.focused_widget.insert(0, self.clipboard_get())
            except tkinter.TclError:
                pass

    def _on_ok(self, event=None):
        self._result = {"ip": self.ip_entry.get(), "user": self.user_entry.get(), "pass": self.pass_entry.get()}
        self.grab_release()
        self.destroy()

    def get_input(self):
        self.master.wait_window(self)
        return self._result

def continue_wsl_setup_after_restart():
    run_command('wsl --update')
    run_command("wsl --set-default-version 2")

if __name__ == "__main__":
    if not is_admin():
        run_as_admin()
    else:
        if '--stage=wsl_part2' in sys.argv:
            continue_wsl_setup_after_restart()
        app = App()
        app.mainloop()
